from aiogram import Router, types, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot import conn, cursor, bot
import os
from pydub import AudioSegment
from whisper import translate_audio
import requests
import warnings
# –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
warnings.filterwarnings('ignore')

# –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'voices', –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists("voices"):
    os.makedirs("voices")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
router = Router()
users = {}

def hsh(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö–µ—à –æ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return str(hash(user_id))

def is_first_question(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cursor.execute("SELECT COUNT(*) FROM likes WHERE user_id = %s", (str(user_id),))
    result = cursor.fetchone()
    return result[0] == 1

@router.message(Command('start'))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user_hash = hsh(message.from_user.id)
    users[user_hash] = {'query': ".", 'content': ".", 'f': True}
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.chat.username}, —è –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –°–ò–õ–ê. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?")

@router.message(Command('clear_history'))
async def clear_history_handler(message: Message):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cursor.execute("UPDATE likes SET history = 0 WHERE user_id = %s", (hsh(message.from_user.id),))
    conn.commit()
    await message.reply("–ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–∞")

def get_llm_answer(question, history):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ LLM."""
    response = requests.post(
        "https://usable-sharp-terrapin.ngrok-free.app/predict",
        json={"query": question, "history": history}
    )
    response_json = response.json()
    return response_json

async def save_voice_message(voice: types.Voice, file_name: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª."""
    file = await bot.get_file(voice.file_id)
    await bot.download_file(file.file_path, file_name)
    audio = AudioSegment.from_file(file_name, format="ogg")
    audio.export(file_name, format="mp3")

def process_voice_message_to_text(file_name: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç."""
    return translate_audio(file_name)

def get_last_3(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cursor.execute(
        "SELECT query FROM likes WHERE user_id = %s AND reaction * history = 1 LIMIT 3",
        (user_id,)
    )
    rows = cursor.fetchall()
    if not rows:
        return ""
    his = [row[0] for row in rows]
    return " ".join(his)

async def add_reaction(callback: types.CallbackQuery, reaction: int):
    print(reaction)
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–∞–π–∫ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫."""
    user_hash = hsh(callback.from_user.id)
    users[user_hash]['f'] = True

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    await bot.edit_message_reply_markup(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    # –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if reaction == 1:
        history_value = 1 
    else:
        history_value = 0
    cursor.execute(
        """INSERT INTO likes(user_id, reaction, query, answer, history)
           VALUES (%s, %s, %s, %s, %s)""",
        (callback.message.chat.id, reaction, users[user_hash]['query'], users[user_hash]['content'], history_value)
    )
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å
    if is_first_question(callback.message.chat.id):
        if reaction == 1:
            await callback.message.answer(
                '–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ä–µ—à–∏–ª—Å—è! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –º–Ω–µ!')
        else:
            await callback.message.answer(
                '–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –º–æ–π –æ—Ç–≤–µ—Ç –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –º–Ω–µ!')

@router.callback_query(F.data == 'like')
async def like(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üëç'."""
    await add_reaction(callback, 1)

@router.callback_query(F.data == 'dislike')
async def dislike(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üëé'."""
    await add_reaction(callback, 0)

@router.message()
async def any_message(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_hash = hsh(message.from_user.id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if message.text and message.text.startswith('/'):
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!')
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if user_hash not in users:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start —Å–Ω–∞—á–∞–ª–∞')
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if users[user_hash]['f']:
        wait_msg = await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç!')
        await bot.send_chat_action(message.chat.id, 'typing')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.voice is not None:
            file_name = f"voices/voice_{user_hash}_{message.message_id}.mp3"
            await save_voice_message(message.voice, file_name)
            text = process_voice_message_to_text(file_name)
        else:
            text = message.text

        if text:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
            history = get_last_3(user_hash)
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            llm_ans = get_llm_answer(text, history)
            answer, photos_list, titles = llm_ans['answer'], llm_ans['photos'], llm_ans['titles']
            await bot.delete_message(message.chat.id, wait_msg.message_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if ('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.' not in str(answer)) and  ('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å' not in str(answer)):
                users[user_hash] = {'query': text, 'content': answer, 'f': False}
                builder = InlineKeyboardBuilder()
                builder.button(text="üëç", callback_data="like")
                builder.button(text="üëé", callback_data="dislike")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤–∫–ª—é—á–∞—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç
                if titles == []:
                    await message.answer(answer, reply_markup=builder.as_markup())
                else:
                    answer += f"\n\n*–û—Ç–≤–µ—Ç —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:*\n"
                    for i, title in enumerate(titles):
                        answer += f"{i + 1}) {title}\n" 
                    await message.answer(answer, reply_markup=builder.as_markup(), parse_mode= "Markdown")


                # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ –ø—É—Å—Ç–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                if photos_list:
                    for photo in photos_list:
                        path = photo['path'].replace('\\', '/')
                        description = photo['description']
                        try:
                            input_file = FSInputFile(path)
                        except:
                            input_file = FSInputFile(path.replace('.png', '.PNG'))

                        await bot.send_photo(message.chat.id, input_file, caption=description)
            else:
                if '–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π.' in answer:
                    input_file = FSInputFile("data/train/documentation.docx")
                    await bot.send_document(message.chat.id, input_file, caption=answer, parse_mode= "Markdown")
                else:
                    await message.answer(answer, parse_mode= "Markdown")
        else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
    else:
        await message.answer("–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –æ—Ç–≤–µ—Ç –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
